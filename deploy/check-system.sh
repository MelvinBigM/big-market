#!/bin/bash

# Script de v√©rification syst√®me pour Big Market
# V√©rifie si le VPS est pr√™t pour le d√©ploiement

echo "üîç V√âRIFICATION SYST√àME - Big Market"
echo "===================================="
echo ""

# Fonction pour v√©rifier si une commande existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fonction pour afficher le statut
print_status() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $2"
    fi
}

# V√©rification de l'OS
echo "üìã Informations syst√®me:"
echo "========================"
echo "OS: $(lsb_release -d | cut -f2)"
echo "Kernel: $(uname -r)"
echo "Architecture: $(uname -m)"
echo "Uptime: $(uptime -p)"
echo ""

# V√©rification des privil√®ges
echo "üîê Privil√®ges:"
echo "=============="
if [ "$EUID" -eq 0 ]; then
    print_status 0 "Ex√©cution en tant que root/sudo"
else
    print_status 1 "Pas d'acc√®s root (requis pour l'installation)"
fi
echo ""

# V√©rification de l'espace disque
echo "üíæ Espace disque:"
echo "================"
df -h / | tail -n 1 | while read -r filesystem size used avail percent mount; do
    echo "Disponible: $avail sur $size (utilis√©: $percent)"
    # Convertir en nombre pour comparaison
    avail_gb=$(echo $avail | sed 's/G.*//' | sed 's/M.*/0/')
    if [ "$avail_gb" -ge 2 ]; then
        print_status 0 "Espace disque suffisant (minimum 2GB requis)"
    else
        print_status 1 "Espace disque insuffisant (minimum 2GB requis)"
    fi
done
echo ""

# V√©rification de la RAM
echo "üß† M√©moire RAM:"
echo "==============="
total_ram=$(free -h | awk '/^Mem:/ {print $2}')
echo "RAM totale: $total_ram"
free_ram=$(free -m | awk '/^Mem:/ {print $7}')
if [ "$free_ram" -ge 512 ]; then
    print_status 0 "RAM disponible suffisante (minimum 512MB requis)"
else
    print_status 1 "RAM disponible insuffisante (minimum 512MB requis)"
fi
echo ""

# V√©rification de la connectivit√© r√©seau
echo "üåê Connectivit√© r√©seau:"
echo "======================"
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    print_status 0 "Connexion Internet disponible"
else
    print_status 1 "Pas de connexion Internet"
fi

if ping -c 1 github.com >/dev/null 2>&1; then
    print_status 0 "Acc√®s √† GitHub disponible"
else
    print_status 1 "Pas d'acc√®s √† GitHub"
fi

if ping -c 1 registry.npmjs.org >/dev/null 2>&1; then
    print_status 0 "Acc√®s au registry npm disponible"
else
    print_status 1 "Pas d'acc√®s au registry npm"
fi
echo ""

# V√©rification des ports
echo "üîå Ports:"
echo "========="
if netstat -tlnp 2>/dev/null | grep -q ":80 "; then
    print_status 1 "Port 80 occup√© (n√©cessaire pour Nginx)"
else
    print_status 0 "Port 80 disponible"
fi

if netstat -tlnp 2>/dev/null | grep -q ":3000 "; then
    print_status 1 "Port 3000 occup√© (utilis√© par l'application)"
else
    print_status 0 "Port 3000 disponible"
fi
echo ""

# V√©rification des logiciels install√©s
echo "üì¶ Logiciels requis:"
echo "==================="

# Git
if command_exists git; then
    git_version=$(git --version | cut -d' ' -f3)
    print_status 0 "Git install√© (version $git_version)"
else
    print_status 1 "Git non install√©"
fi

# Curl
if command_exists curl; then
    print_status 0 "Curl install√©"
else
    print_status 1 "Curl non install√©"
fi

# Node.js
if command_exists node; then
    node_version=$(node --version)
    print_status 0 "Node.js install√© ($node_version)"
else
    print_status 1 "Node.js non install√©"
fi

# npm
if command_exists npm; then
    npm_version=$(npm --version)
    print_status 0 "npm install√© (version $npm_version)"
else
    print_status 1 "npm non install√©"
fi

# PM2
if command_exists pm2; then
    pm2_version=$(pm2 --version)
    print_status 0 "PM2 install√© (version $pm2_version)"
else
    print_status 1 "PM2 non install√©"
fi

# Nginx
if command_exists nginx; then
    nginx_version=$(nginx -v 2>&1 | cut -d'/' -f2)
    print_status 0 "Nginx install√© (version $nginx_version)"
    
    # V√©rification du statut Nginx
    if systemctl is-active --quiet nginx; then
        print_status 0 "Nginx en cours d'ex√©cution"
    else
        print_status 1 "Nginx arr√™t√©"
    fi
else
    print_status 1 "Nginx non install√©"
fi

echo ""

# R√©sum√©
echo "üìä R√âSUM√â:"
echo "=========="
echo ""

# V√©rifier si le syst√®me est pr√™t
ready=true

# V√©rifications critiques
if [ "$EUID" -ne 0 ]; then
    echo "‚ö†Ô∏è  Ex√©cutez ce script avec sudo pour l'installation"
    ready=false
fi

if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Connexion Internet requise"
    ready=false
fi

if [ "$ready" = true ]; then
    echo "üéâ Le syst√®me est pr√™t pour le d√©ploiement !"
    echo ""
    echo "üöÄ Pour d√©ployer Big Market, ex√©cutez:"
    echo "   git clone https://github.com/MelvinBigM/big-market.git /var/www/big-market"
    echo "   cd /var/www/big-market/deploy"
    echo "   chmod +x *.sh"
    echo "   sudo ./full-deploy.sh"
else
    echo "‚ùå Le syst√®me n√©cessite une configuration suppl√©mentaire"
    echo ""
    echo "üìã Actions recommand√©es:"
    if [ "$EUID" -ne 0 ]; then
        echo "   ‚Ä¢ Ex√©cuter avec sudo"
    fi
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        echo "   ‚Ä¢ V√©rifier la connexion Internet"
    fi
    echo "   ‚Ä¢ Installer les d√©pendances manquantes"
fi 